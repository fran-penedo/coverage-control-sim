PARSER_BEGIN(Parser)

package bu.edu.coverage.coverage_control_sim.util;
import bu.edu.coverage.coverage_control_sim.util.Point;
import bu.edu.coverage.coverage_control_sim.event.Director;
import bu.edu.coverage.coverage_control_sim.actor.*;
import bu.edu.coverage.coverage_control_sim.control.*;
import bu.edu.coverage.coverage_control_sim.comm.*;
import bu.edu.coverage.coverage_control_sim.sense.*;
import java.util.List;
import java.util.ArrayList;


public class Parser{	public static void main(String args[]) throws ParseException	{	  Parser p = new Parser(System.in);
	  Director d = p.input();
	  System.out.println(d.toCode());
	}
}

PARSER_END(Parser)

SKIP :
{  " "
| "\t"
}

TOKEN :
{  < MASTER: "MasterAgent" >
| 
  < AGENT: "Agent" >
|
  < TARGET: "Target" >
|
  < OBSTACLE: "Obstacle" >
|
  < DEADLINE: "Deadline" >
}

TOKEN :
{
  < FLOATING_POINT_LITERAL: ("-")? < FLOAT >>
| < #FLOAT:         (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

TOKEN :
{  < INT_LITERAL: ("-")? (["0"-"9"])+ >
}


Director input() :
{
  Director d = new Director();}{  ( actor(d) )+ < EOF >
  {    return d;
  }
}

void actor(Director d) :
{}
{  master(d) | agent(d) | target(d) | obstacle(d)
}

void master(Director d) :
{
  Point p;
  Point size;
  double v;
  double heading;
  int k;
  double delta;
  int b;
  double gamma;
  boolean actionh;}{  < MASTER >
  p=point()
  size=point()
  v=value()
  heading=value()
  k=integer()
  delta=value()
  b=integer()
  gamma=value()
  actionh=bool()
  "\n"
  {    MasterAgent master = new MasterAgent(d);
    master.setCommunication(new BasicComm());
	master.setControl(new KLCRH(k, delta, b, gamma, actionh));
	master.setSense(new MasterSense());  }
}

void agent(Director d) :
{
  Point p;
  Point size;
  double v;
  double heading;
}
{
  < AGENT >
  p=point()
  size=point()
  v=value()
  heading=value()
  "\n"
  {
    Agent agent = new Agent(d, p, size, v, heading);
    agent.setCommunication(new BasicComm());
	agent.setControl(new ControlClient());
	agent.setSense(new BasicSense(1));
  }
}

void obstacle(Director d) :
{
  Point p;
  Point size;
  List<Point> pp;}
{  < OBSTACLE >
  p = point()
  size = point()
  pp = pointList()
  "\n"
  {    Obstacle obstacle = new Obstacle(d, pp);
  }
}

void target(Director d) :
{
  Point p;
  Point size;
  double v;
  double heading;
  double ireward;
  Discount discount;
}
{
  < TARGET >
  p=point()
  size=point()
  v=value()
  heading=value()
  ireward=value()
  discount=discount()
  "\n"
  {
    Target target = new Target(d, p, size.x, v, heading, discount, ireward, true);
  }
}

Discount discount() :
{  Discount discount;
}
{  discount=deadline()
  {    return discount;
  }
}

DeadlineDiscount deadline() :{  double alpha;
  double beta;
  double d;
}
{  < DEADLINE > alpha=value() beta=value() d=value()
  {    return new DeadlineDiscount(alpha, beta, d);
  }}


Point point() :
{
  double x;
  double y;
}
{  "(" x=value() "," y=value() ")"
  {    return new Point(x, y);
  }
}

List<Point> pointList() :
{  ArrayList<Point> points = new ArrayList<Point>();
}
{  ( pointOfList(points) )+
  {    return points;
  }
}
void pointOfList(List<Point> points) :{
  Point p;}{  p=point()
  {    points.add(p);
  }}

double value() :
{  Token t;
}
{  t=< FLOATING_POINT_LITERAL >
  {    return Double.parseDouble(t.image);
  }
}

int integer() :
{  Token t;
}
{  t=< INT_LITERAL >
  {    return Integer.parseInt(t.image);
  }
}

boolean bool() :{  Token t;
}
{  t=< INT_LITERAL >
  {    return Integer.parseInt(t.image) != 0;
  }
}